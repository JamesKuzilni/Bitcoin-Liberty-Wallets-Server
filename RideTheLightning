#!/usr/bin/env python3
import subprocess
import os
import wget
import tarfile
import shutil
import json
import random
import string

def download_and_extract(url, filename):
    """Downloads a tar archive from the specified URL and extracts it."""
    # Define the downloads directory
    downloads_directory = os.path.join(os.path.expanduser('~'), 'Downloads')
    filepath = os.path.join(downloads_directory, filename)

    # Check if the file already exists
    if os.path.exists(filepath):
        print('File already exists.')
    else:
        print('Downloading file...')
        # Download the file from the URL
        wget.download(url, filepath)
        print('Download complete.')

    # Check if the downloaded file exists
    if not os.path.exists(filepath):
        print('File does not exist.')
        return

    # Extract the tar.gz file
    with tarfile.open(filepath, 'r:gz') as tar:
        tar.extractall(downloads_directory)
        print('Extraction complete.')

if __name__ == '__main__':
    url = 'https://github.com/Ride-The-Lightning/RTL/archive/refs/tags/v0.14.1.tar.gz'
    filename = 'RTL-0.14.1.tar.gz'

    download_and_extract(url, filename)

def move_and_rename_directory(source_dir, destination_dir, new_name):
    """Moves a directory and renames it."""
    source_path = os.path.join(source_dir, source_name)
    destination_path = os.path.join(destination_dir, new_name)

    try:
        # Rename and move the directory
        os.rename(source_path, destination_path)
        print(f'Moved and renamed directory to {destination_path}')
    except Exception as e:
        print(f'Error: {e}')

if __name__ == '__main__':
    source_name = 'RTL-0.14.1'
    destination_dir = os.path.expanduser('~')
    new_name = 'RTL'

    move_and_rename_directory(os.path.expanduser('~/Downloads'), destination_dir, new_name)


def execute_command_in_directory(command, directory):
    try:
        # Change the current working directory to the specified directory
        os.chdir(directory)

        # Execute the command
        subprocess.run(command, shell=True, check=True)
    except subprocess.CalledProcessError as e:
        print(f'Error executing command: {e}')
    except Exception as e:
        print(f'An error occurred: {e}')
    finally:
        # Change the working directory back to the original location
        os.chdir(os.path.expanduser('~'))

if __name__ == '__main__':
    directory = os.path.join(os.path.expanduser('~'), 'RTL')
    command = 'npm install --omit=dev --legacy-peer-deps'

    execute_command_in_directory(command, directory)

def rename_rtl_config():
    source_path = os.path.expanduser("~/RTL/Sample-RTL-Config.json")
    destination_path = os.path.expanduser("~/RTL/RTL-Config.json")

    try:
        os.rename(source_path, destination_path)
        print(f"File renamed from '{source_path}' to '{destination_path}'")
    except Exception as e:
        print(f"Error renaming the file: {e}")

if __name__ == "__main__":
    rename_rtl_config()

import os
import json
import random
import string

def generate_random_password(length):
    # Generate a random password of the specified length
    characters = string.ascii_letters + string.digits
    password = ''.join(random.choice(characters) for _ in range(length))
    return password

def create_rtl_config_file():
    random_password = generate_random_password(12)  # Change the length as needed
    
    # Hardcode the name of the Lightning Node here
    nameoflightningnode = "name_of_lightning_node"

    config_data = {
        "multiPass": random_password,
        "port": "3000",
        "defaultNodeIndex": 1,
        "dbDirectoryPath": "/home/humble/RTL",
        "SSO": {
            "rtlSSO": 0,
            "rtlCookiePath": "",
            "logoutRedirectLink": ""
        },
        "nodes": [
            {
                "index": 1,
                "lnNode": nameoflightningnode,  # Use the hardcoded name here
                "lnImplementation": "LND",
                "Authentication": {
                    "macaroonPath": "/home/humble/.lnd/data/chain/bitcoin/mainnet",
                    "configPath": "/home/humble/.lnd/lnd.conf",
                    "swapMacaroonPath": "",
                    "boltzMacaroonPath": ""
                },
                "Settings": {
                    "userPersona": "MERCHANT",
                    "themeMode": "DAY",
                    "themeColor": "PURPLE",
                    "channelBackupPath": "/home/humble/lndbackup",
                    "logLevel": "ERROR",
                    "lnServerUrl": "https://127.0.0.1:8080",
                    "swapServerUrl": "https://127.0.0.1:8081",
                    "boltzServerUrl": "https://127.0.0.1:9003",
                    "fiatConversion": False,
                    "unannouncedChannels": False
                }
            }
        ]
    }

    config_file_path = os.path.expanduser("~/RTL/RTL-Config.json")

    with open(config_file_path, 'w') as config_file:
        json.dump(config_data, config_file, indent=3)

    print(f'Created RTL-Config.json file at {config_file_path}')

if __name__ == "__main__":
    create_rtl_config_file()


def create_lndbackup_directory():
    lndbackup_directory = os.path.expanduser("~/lndbackup")

    # Check if the directory already exists
    if os.path.exists(lndbackup_directory):
        print(f"Directory {lndbackup_directory} already exists.")
    else:
        try:
            os.makedirs(lndbackup_directory)
            print(f"Created directory {lndbackup_directory}")
        except OSError as e:
            print(f"Error creating directory: {e}")

if __name__ == "__main__":
    create_lndbackup_directory()

def create_RTL_service():
    file_path = "/etc/systemd/system/RTL.service"
    content = '''\
[Unit]
Description=RTL daemon
Wants=lnd.service
After=lnd.service

[Service]
ExecStart=/home/humble/nodejs/bin/node /home/humble/RTL/rtl
User=humble
Restart=always
TimeoutSec=120
RestartSec=30

[Install]
WantedBy=multi-user.target
'''

    # Write the content to a temporary file
    temp_file_path = "/tmp/RTL.service"
    with open(temp_file_path, 'w') as file:
        file.write(content)

    # Use sudo to move the temporary file to the target directory
    move_command = ["sudo", "mv", temp_file_path, file_path]
    subprocess.run(move_command, check=True)

    # Set the correct ownership and permissions for the service file
    chown_command = ["sudo", "chown", "root:root", file_path]
    subprocess.run(chown_command, check=True)
    chmod_command = ["sudo", "chmod", "644", file_path]
    subprocess.run(chmod_command, check=True)

    # Reload systemd configuration
    reload_command = ["sudo", "systemctl", "daemon-reload"]
    subprocess.run(reload_command, check=True)

    # Enable the RTL service
    enable_command = ["sudo", "systemctl", "enable", "RTL.service"]
    subprocess.run(enable_command, check=True)

    # Start the RTL service
    start_command = ["sudo", "systemctl", "start", "RTL.service"]
    subprocess.run(start_command, check=True)

if __name__ == "__main__":
    create_RTL_service()

