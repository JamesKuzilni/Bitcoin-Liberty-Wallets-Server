#!/usr/bin/env python3
import os
import wget
import shutil
import subprocess
import tarfile
import requests

def download_file(url, filename):
    """Downloads a file from the specified URL to the specified filename."""
    downloads_directory = os.path.join(os.path.expanduser('~'), 'Downloads')
    filepath = os.path.join(downloads_directory, filename)

    print('Downloading file...')
    wget.download(url, filepath)

def extract_file(filename):
    """Extracts a file from a tar archive."""
    filepath = os.path.join(os.path.expanduser('~'), 'Downloads', filename)
    if not os.path.exists(filepath):
        print('File does not exist.')
        return

    with open(filepath, 'rb') as f:
        tar = tarfile.open(fileobj=f)
        tar.extractall(os.path.join(os.path.expanduser('~'), 'Downloads'))

if __name__ == '__main__':
    url = 'https://github.com/cculianu/Fulcrum/releases/download/v1.9.1/Fulcrum-1.9.1-x86_64-linux.tar.gz'
    filename = 'Fulcrum-1.9.1-x86_64-linux.tar.gz'

    download_file(url, filename)
    print('The file has been downloaded.')
    extract_file(filename)

def create_directories():
    """Creates two directories: ~/fulcrum and ~/fulcrum_db."""
    home_directory = os.path.expanduser('~')
    fulcrum_directory = os.path.join(home_directory, 'fulcrum')
    fulcrum_db_directory = os.path.join(home_directory, 'fulcrum_db')

    if not os.path.exists(fulcrum_directory):
        os.makedirs(fulcrum_directory)

    if not os.path.exists(fulcrum_db_directory):
        os.makedirs(fulcrum_db_directory)

if __name__ == '__main__':
    create_directories()

def move_files():
    """Moves the contents of Fulcrum-1.9.1-x86_64-linux directory from ~/Downloads to ~/fulcrum."""
    home_directory = os.path.expanduser('~')
    source_directory = os.path.join(home_directory, 'Downloads', 'Fulcrum-1.9.1-x86_64-linux')
    destination_directory = os.path.join(home_directory, 'fulcrum')

    if not os.path.exists(source_directory):
        print(f"The source directory '{source_directory}' does not exist.")
        return

    if not os.path.exists(destination_directory):
        print(f"The destination directory '{destination_directory}' does not exist.")
        return

    print('Moving files...')
    for file in os.listdir(source_directory):
        file_path = os.path.join(source_directory, file)
        destination_path = os.path.join(destination_directory, file)

        # Change ownership of the file to root
        chown_command = ["sudo", "chown", "root:root", file_path]
        subprocess.run(chown_command, check=True)

        # Change file permissions to 644
        chmod_command = ["sudo", "chmod", "644", file_path]
        subprocess.run(chmod_command, check=True)

        # Move the file to the destination directory using sudo
        move_command = ["sudo", "mv", file_path, destination_directory]
        subprocess.run(move_command, check=True)

    print("File move complete.")

if __name__ == '__main__':
    move_files()

def generate_key_and_certificate():
    """Generates a key and certificate using the openssl command."""
    openssl_command = ["openssl", "req", "-newkey", "rsa:2048", "-new", "-nodes", "-x509", "-days", "3650", "-keyout", "key.pem", "-out", "cert.pem"]
    subprocess.run(openssl_command, check=True)
    print("OpenSSL Complete")

if __name__ == '__main__':
    fulcrum_directory = os.path.expanduser('~/fulcrum')
    os.chdir(fulcrum_directory)
    generate_key_and_certificate()

def rename_file():
    """Renames the fulcrum-example-config.conf file to fulcrum.conf."""
    home_directory = os.path.expanduser('~')
    source_file_path = os.path.join(home_directory, 'fulcrum', 'fulcrum-example-config.conf')
    destination_file_path = os.path.join(home_directory, 'fulcrum', 'fulcrum.conf')

    print('Renaming file...')
    os.rename(source_file_path, destination_file_path)

def delete_file():
    """Deletes the fulcrum.conf file."""
    home_directory = os.path.expanduser('~')
    file_path = os.path.join(home_directory, 'fulcrum', 'fulcrum.conf')

    print('Deleting file...')
    os.remove(file_path)

import os

def create_fulcrum_conf(file_path, rpcusername, rpcpassword):
    """Creates the fulcrum.conf file with the specified contents."""
    config_contents = f"""datadir = /home/humble/fulcrum_db  # Windows: datadir = D:\\FulcrumData\\mainnet
bitcoind = 127.0.0.1:8332
rpcuser = {rpcusername}
rpcpassword = {rpcpassword}
ssl = 0.0.0.0:50002
cert = /home/humble/fulcrum/cert.pem
key = /home/humble/fulcrum/key.pem
peering = false
fast-sync = 5000
"""

    with open(file_path, 'w') as file:
        file.write(config_contents)

if __name__ == '__main__':
    file_path = os.path.join(os.path.expanduser('~'), 'fulcrum', 'fulcrum.conf')
    rpcusername = 'rpcusername'
    rpcpassword = 'rpcpassword'
    create_fulcrum_conf(file_path, rpcusername, rpcpassword)

    print('fulcrum.conf file has been created.')

# List of files to make executable
files_to_make_executable = ["/home/humble/fulcrum/Fulcrum", "/home/humble/fulcrum/FulcrumAdmin"]

for file_path in files_to_make_executable:
    # Check if the file exists
    if os.path.exists(file_path):
        try:
            # Set the executable permission using sudo and chmod
            os.system(f"sudo chmod +x {file_path}")
            print(f"File {file_path} is now executable.")
        except OSError as e:
            print(f"Error changing permissions for {file_path}: {e}")
    else:
        print(f"File {file_path} does not exist.")

def create_fulcrum_service(system_username):
    file_path = "/etc/systemd/system/fulcrum.service"
    content = '''\
[Unit]
Description=Fulcrum
After=network.target

[Service]
ExecStart=/home/humble/fulcrum/Fulcrum /home/humble/fulcrum/fulcrum.conf
User=humble
LimitNOFILE=8192
TimeoutStopSec=30min

[Install]
WantedBy=multi-user.target
'''

    # Write the content to a temporary file
    temp_file_path = "/tmp/fulcrum.service"
    with open(temp_file_path, 'w') as file:
        file.write(content)

    # Use sudo to move the temporary file to the target directory
    move_command = ["sudo", "mv", temp_file_path, file_path]
    subprocess.run(move_command, check=True)

    # Set the correct ownership and permissions for the service file
    chown_command = ["sudo", "chown", "root:root", file_path]
    subprocess.run(chown_command, check=True)
    chmod_command = ["sudo", "chmod", "644", file_path]
    subprocess.run(chmod_command, check=True)

    # Reload systemd configuration
    reload_command = ["sudo", "systemctl", "daemon-reload"]
    subprocess.run(reload_command, check=True)

    # Enable the fulcrum service
    enable_command = ["sudo", "systemctl", "enable", "fulcrum.service"]
    subprocess.run(enable_command, check=True)

# Call the function with the desired system username
create_fulcrum_service("humble")

# Define the URL of the Node.js tar.xz file and the target directory
url = "https://nodejs.org/dist/v18.18.0/node-v18.18.0-linux-x64.tar.xz"
download_dir = os.path.expanduser("~/Downloads")

# Create the target directory if it doesn't exist
os.makedirs(download_dir, exist_ok=True)

# Define the local file path for the downloaded tar.xz file
local_file_path = os.path.join(download_dir, "node-v18.18.0-linux-x64.tar.xz")

# Download the Node.js tar.xz file
response = requests.get(url)
if response.status_code == 200:
    with open(local_file_path, 'wb') as file:
        file.write(response.content)
else:
    print(f"Failed to download {url}. Status code: {response.status_code}")
    exit(1)

# Extract the downloaded tar.xz file
try:
    with tarfile.open(local_file_path, 'r:xz') as tar:
        tar.extractall(path=download_dir)
    print(f"Node.js has been extracted to {download_dir}")
except tarfile.TarError as e:
    print(f"Error extracting the tar.xz file: {str(e)}")
    exit(1)

# Define the source and destination directories
source_dir = os.path.expanduser("~/Downloads/node-v18.18.0-linux-x64")
destination_dir = os.path.expanduser("~")

# Check if the source directory exists
if not os.path.exists(source_dir):
    print(f"Source directory '{source_dir}' does not exist.")
    exit(1)

# Check if the destination directory already exists; if not, create it
if not os.path.exists(destination_dir):
    os.makedirs(destination_dir)
# Rename and move the source directory to the destination directory
new_destination = os.path.join(destination_dir, "nodejs")

try:
    shutil.move(source_dir, new_destination)
    print(f"Moved '{source_dir}' to '{new_destination}'")
except shutil.Error as e:
    print(f"Error moving the directory: {str(e)}")
    exit(1)

# Define the path to the .bashrc file
bashrc_path = os.path.expanduser("~/.bashrc")

# Define the line to be added
line_to_add = 'PATH=$PATH:/home/humble/nodejs/bin\n'

# Check if the .bashrc file exists
if not os.path.exists(bashrc_path):
    print(f"The .bashrc file '{bashrc_path}' does not exist.")
    exit(1)

# Check if the line is already present in .bashrc
with open(bashrc_path, 'r') as file:
    if line_to_add in file.read():
        print("The line is already present in .bashrc.")
        exit(0)

# Append the line to .bashrc
with open(bashrc_path, 'a') as file:
    file.write(line_to_add)

print("The line has been added to .bashrc.")

try:
    # Run the 'exit' command to terminate the SSH session
    subprocess.run(["exit"], shell=True, check=True)
    print("SSH session has been terminated.")
except subprocess.CalledProcessError as e:
    print(f"Error executing 'exit' command: {e}")
except Exception as e:
    print(f"An error occurred: {e}")
