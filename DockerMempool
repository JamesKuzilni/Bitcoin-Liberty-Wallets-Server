#!/usr/bin/env python3
import os
import wget
import tarfile
import subprocess
import requests
import shutil

# Install Docker
docker_install_command = ["sudo", "apt", "install", "docker"]
subprocess.run(docker_install_command, check=True)

# Install Docker Compose
docker_compose_install_command = ["sudo", "apt", "install", "docker-compose"]
subprocess.run(docker_compose_install_command, check=True)

# Get the current user's username
current_user = os.getlogin()

# Construct the command to add the current user to the Docker group
add_user_to_docker_command = ["sudo", "usermod", "-aG", "docker", current_user]

# Run the command
subprocess.run(add_user_to_docker_command, check=True)

# Make docker-compose executable
docker_compose_chmod_command = ["sudo", "chmod", "+x", "/usr/bin/docker-compose"]
subprocess.run(docker_compose_chmod_command, check=True)

docker_compose_path = "/usr/bin/docker-compose"

if os.access(docker_compose_path, os.X_OK):
    print("Docker Compose is executable.")
else:
    print("Docker Compose is not executable.")

# Define the Git repository URL
repository_url = "https://github.com/mempool/mempool.git"

# Directory where you want to clone the repository
clone_directory = "mempool"

def clone_repository(url, directory):
    try:
        # Run the git clone command
        subprocess.run(["git", "clone", url, directory], check=True)
        print(f"Repository cloned successfully to {directory}")
    except subprocess.CalledProcessError as e:
        print(f"Error cloning the repository: {e}")

if __name__ == "__main__":
    clone_repository(repository_url, clone_directory)

# Define file path, IP address, RPC username, and RPC password
file_path = "/home/humble/mempool/docker/docker-compose.yml"
ipaddress = "ip_address"
rpcusername = "rpc_username"
rpcpassword = "rpc_password"

# Delete the file with sudo privileges
delete_command = ["sudo", "rm", "-f", file_path]

try:
    subprocess.run(delete_command, check=True)
    print(f"File {file_path} deleted successfully.")
except subprocess.CalledProcessError as e:
    print(f"Error deleting file {file_path}: {e}")

# Write the file content to the specified path with sudo privileges
file_content = f'''\
version: "3.7"

services:
  web:
    environment:
      FRONTEND_HTTP_PORT: "8080"
      BACKEND_MAINNET_HTTP_HOST: "api"
    image: mempool/frontend:latest
    user: "1000:1000"
    restart: always
    stop_grace_period: 1m
    command: "./wait-for db:3306 --timeout=720 -- nginx -g 'daemon off;'"
    ports:
      - 4080:8080
  api:
    environment:
      MEMPOOL_BACKEND: "fulcrum"
      CORE_RPC_HOST: "{ipaddress}"
      CORE_RPC_PORT: "8332"
      CORE_RPC_USERNAME: "{rpcusername}"
      CORE_RPC_PASSWORD: "{rpcpassword}"
      DATABASE_ENABLED: "true"
      DATABASE_HOST: "db"
      DATABASE_DATABASE: "mempool"
      DATABASE_USERNAME: "mempool"
      DATABASE_PASSWORD: "mempool"
      STATISTICS_ENABLED: "true"
    image: mempool/backend:latest
    user: "1000:1000"
    restart: always
    stop_grace_period: 1m
    command: "./wait-for-it.sh db:3306 --timeout=720 --strict -- ./start.sh"
    volumes:
      - ./data:/backend/cache
  db:
    environment:
      MYSQL_DATABASE: "mempool"
      MYSQL_USER: "mempool"
      MYSQL_PASSWORD: "mempool"
      MYSQL_ROOT_PASSWORD: "admin"
    image: mariadb:10.5.8
    user: "1000:1000"
    restart: always
    stop_grace_period: 1m
    volumes:
      - ./mysql/data:/var/lib/mysql
'''

# Write the file content to the specified path with sudo privileges
write_command = ["sudo", "tee", file_path]
subprocess.run(write_command, input=file_content.encode(), check=True)

print(f"docker-compose.yml file created at: {file_path}")

# Change current working directory
docker_directory = "/home/humble/mempool/docker/"
os.chdir(docker_directory)

# Command to execute
docker_compose_up_command = ["sudo", "docker-compose", "up"]

# Command to enable the Docker service
enable_docker_command = 'sudo systemctl enable docker'

# Execute the enable Docker command using subprocess
try:
    subprocess.run(enable_docker_command, shell=True, check=True)
    print("Docker service enabled successfully.")
except subprocess.CalledProcessError as e:
    print(f"Error enabling Docker service: {e}")

# Command to update the package list
update_command = "sudo apt-get update"

# Execute the command using subprocess
try:
    subprocess.run(update_command, shell=True, check=True)
    print("Package list updated successfully.")
except subprocess.CalledProcessError as e:
    print(f"Error updating package list: {e}")

# Command to install the specified packages
install_command = "sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common unzip"

# Execute the command using subprocess
try:
    subprocess.run(install_command, shell=True, check=True)
    print("Packages installed successfully.")
except subprocess.CalledProcessError as e:
    print(f"Error installing packages: {e}")

# Command to remove Docker-related packages
remove_command = "sudo apt-get remove -y docker docker-engine docker.io containerd runc"

# Execute the command using subprocess
try:
    subprocess.run(remove_command, shell=True, check=True)
    print("Docker-related packages removed successfully.")
except subprocess.CalledProcessError as e:
    print(f"Error removing Docker-related packages: {e}")

# Command to download the Docker GPG key and add it to apt-key
add_gpg_key_command = "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -"

# Execute the command using subprocess
try:
    subprocess.run(add_gpg_key_command, shell=True, check=True)
    print("Docker GPG key added successfully.")
except subprocess.CalledProcessError as e:
    print(f"Error adding Docker GPG key: {e}")

# Command to add the Docker repository
add_repository_command = 'sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"'

# Execute the command using subprocess
try:
    subprocess.run(add_repository_command, shell=True, check=True)
    print("Docker repository added successfully.")
except subprocess.CalledProcessError as e:
    print(f"Error adding Docker repository: {e}")

# Command to update the package list
update_command = "sudo apt-get update"

# Command to install Docker-related packages
install_docker_command = "sudo apt-get install -y docker-ce docker-ce-cli containerd.io"

# Execute the update command using subprocess
try:
    subprocess.run(update_command, shell=True, check=True)
    print("Package list updated successfully.")
except subprocess.CalledProcessError as e:
    print(f"Error updating package list: {e}")

# Execute the install Docker command using subprocess
try:
    subprocess.run(install_docker_command, shell=True, check=True)
    print("Docker-related packages installed successfully.")
except subprocess.CalledProcessError as e:
    print(f"Error installing Docker-related packages: {e}")

# Command to download and install Docker Compose
install_compose_command = (
    'sudo curl -L "https://github.com/docker/compose/releases/download/1.25.3/'
    'docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose'
)

# Execute the install Docker Compose command using subprocess
try:
    subprocess.run(install_compose_command, shell=True, check=True)
    print("Docker Compose installed successfully.")
except subprocess.CalledProcessError as e:
    print(f"Error installing Docker Compose: {e}")

# Command to download and install Docker Compose
install_compose_command = (
    'sudo curl -L "https://github.com/docker/compose/releases/download/1.25.3/'
    'docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && '
    'sudo chmod +x /usr/local/bin/docker-compose'
)

# Execute the install Docker Compose command using subprocess
try:
    subprocess.run(install_compose_command, shell=True, check=True)
    print("Docker Compose installed and made executable successfully.")
except subprocess.CalledProcessError as e:
    print(f"Error installing Docker Compose: {e}")

# Command to reboot the system immediately
reboot_command = 'sudo shutdown -r now'

# Execute the reboot command using subprocess
try:
    subprocess.run(reboot_command, shell=True, check=True)
    print("System is rebooting.")
except subprocess.CalledProcessError as e:
    print(f"Error rebooting the system: {e}")

